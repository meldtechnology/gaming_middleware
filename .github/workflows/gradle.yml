# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Middleware Service Workflow

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      BASE-IMAGE: josleke/middleware-service
      RELEASE-TAG: 2025.10.9_1

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Maven Server Settings
        uses: s4u/maven-settings-action@v3.0.0
        with:
          githubServer: false
          servers: |
            [{
                "id": "GitHubPackages",
                "username": "${{ secrets.USER_READ }}",
                "password": "${{ secrets.TOKEN_READ }}"
            },
            {
                "id": "meld-document-services",
                "username": "${{ secrets.USER_READ }}",
                "password": "${{ secrets.TOKEN_READ }}"
            },
            {
                "id": "meld-payment-services",
                "username": "${{ secrets.USER_READ }}",
                "password": "${{ secrets.TOKEN_READ }}"
            },
            {
                "id": "meld-report-services",
                "username": "${{ secrets.USER_READ }}",
                "password": "${{ secrets.TOKEN_READ }}"
            }]

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a # v3.0.0

      - name: Build
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{env.BASE-IMAGE}}
          tags: ${{env.RELEASE-TAG}}

      - name: Build and push Docker image
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to AWS - EC2
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ vars.SSH_HOST }}
          USER_NAME: ${{ vars.USER_NAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
          ssh -o "StrictHostKeyChecking no" -i private_key.pem ${USER_NAME}@${HOSTNAME} '
              # Now we have got the access of EC2 and we will start the deploy .
              export MIDDLEWARE_SERVICE=${{env.BASE-IMAGE}}:${{env.RELEASE-TAG}}
              echo "$MIDDLEWARE_SERVICE"
              docker-compose -f /app/middleware-service.yml up -d
              ' 
